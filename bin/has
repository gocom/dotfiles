#!/usr/bin/env bash

app_name="${0##*/}"
app_version="0.0.0"

usage () {
  cat <<EOF
Lists version numbers for the specified command.

Usage:
  $ $app_name [options] [command ...]

Options:
  -h, --help         Print this message
  -v, --version      Print version number
  -s, --supported    List supported commands
  -u, --unsupported  List unsupported commands
  -f, --force        Perform unsafe check even if the command is not supported

Examples:
  $ $app_name
  $ $app_name git
EOF
}

table () {
  cat <<EOF
# <progam>  [regex:<expression>]  <argument ...>
ant             -version
apm             --version
autoconf        --version
awk             --version
bash            --version
bats            --version
bower           --version
brew            --version
bzr             --version
composer        --version
curl            --version
dd              --version
dnsmasq         --version
docker          --version
docker-compose  --version
docker-machine  --version
emacs           --version
ffmpeg          -version
gcc             --version
git             --version
hg              --version
httpd           -v
iconv           --version
jasper          --version
java            -version
javac           -version
jq              --version
lame            --version
less            --version
lynx            --version
m4              --version
magick          --version
make            --version
mcrypt          --version
memcached       --version
nano            --version
node            --version
npm             --version
openssl         version
perl            --version
php             --version
pulseaudio      --version
python          --version
rsync           --version
ruby            --version
scala           -version
screenfetch     --version
shellcheck      --version
svn             --version
tr              --version
vim             --version
wget            --version
youtube-dl      --version
zsh             --version
EOF
}

check () {
  local option line list name options

  if [ "$list" = "unsupported" ]; then
    list="$(check --supported)"

    for option in "$@"; do
      while read -r line; do
        if [ "$line" = "$option" ]; then
          break
        fi
      done <<< "$list"

      if ! [ "$line" = "$option" ]; then
        echo "$option"
      fi
    done

    return 0
  fi

  while read -r line; do
    name="$(echo "$line" | awk -F '[[:space:]]{2,}' '!/^[#\s]/ {print $1}')"

    if ! [ "$name" ]; then
      continue
    fi

    if [ "$list" = "names" ]; then
      echo "$name"
      continue
    fi

    options="$(echo "$line" | awk -F '[[:space:]]{2,}' '{print $2}')"

    if [ "$#" -eq 0 ]; then
      extract "$name" "$options"
      continue
    fi

    for option in "$@"; do
      if [ "$name" = "$option" ]; then
        extract "$name" "$options"
        break
      fi
    done
  done <<< "$(table)"

  if [ "$force" ] && [ "$#" -gt 0 ]; then
    while read -r line; do
      extract "$line"
    done <<< "$(check --unsupported "$@")"
  fi

  return 0
}

extract () {
  local name cmd option message regex version

  name="${1:-}"
  shift

  if ! [ "$name" ]; then
    return 1
  fi

  cmd="$(command -v "$name" 2> /dev/null)"

  if ! [ "$cmd" ]; then
    echo "✘ $name -"
    return 1
  fi

  case "${1:-}" in
    regex:*) regex="${1:6}"; shift ;;
    *) regex="([[:digit:]]+\\.?){2,3}" ;;
  esac

  if [ "$#" -eq 0 ]; then
    if ! [ "$force" ]; then
      echo "✔ $name exists"
      return 0
    fi

    set -- --version -version
  fi

  for option in "$@"; do
    message="$("$cmd" "$option" 2>&1)" || continue
    break
  done

  if [ "$message" ]; then
    version="$(echo "$message" | grep -Eo "$regex" | head -n1)"
  fi

  if ! [ "$version" ]; then
    echo "✘ $name ?.?.?"
    return 1
  fi

  echo "✔ $name $version"
}

main () {
  local args option list force OPTIND OPTARG OPTERR

  args=()

  for option in "$@"; do
    case "$option" in
      -*) break ;;
      *) args+=("$option"); shift ;;
    esac
  done

  while getopts ":hvusf-:" option; do
    case "$option" in
      -)
        case "$OPTARG" in
          help) usage; exit 0 ;;
          version) echo "$app_version"; exit 0 ;;
          unsupported) list="unsupported" ;;
          supported) list="names" ;;
          force) force=1 ;;
          *)
            if [ "$OPTERR" = 1 ] ; then
              echo "Unknown option --$OPTARG"
              exit 1
            fi
            ;;
        esac;;
      h) usage; exit 0 ;;
      v) echo "$app_version"; exit 0 ;;
      u) list="unsupported" ;;
      s) list="names" ;;
      f) force=1 ;;
      \?)
        echo "Invalid option: -$OPTARG"
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument."
        exit 1
        ;;
      *)
        echo "Unexpected: -$OPTARG"
        exit 1
        ;;
    esac
  done

  shift "$((OPTIND - 1))"
  set -- "${args[@]}" "$@"

  check "$@" | sort | column -t -s ' '
}

main "$@"
