#!/usr/bin/env node

const mime = require('mime-types');
const moment = require('moment');
const child_process = require('child_process');
const crypto = require('crypto');
const hb = require('handlebars');
const fs = require('fs-extra');
const path = require('path');
const process = require('process');
const chalk = require('chalk');
const argv = require('yargs')
  .help(false)
  .version(false)
  .options({
    h: {
      alias: 'help',
      boolean: true
    },
    v: {
      alias: 'version',
      boolean: true
    },
    V: {
      alias: 'verbose',
      count: true
    },
    d: {
      alias: 'directories',
      boolean: true
    },
    f: {
      alias: 'files',
      boolean: true
    },
    A: {
      alias: 'absolute',
      boolean: true
    },
    c: {
      alias: ['copy'],
      boolean: true
    },
    D: {
      alias: ['dry-run', 'dryrun'],
      boolean: true
    },
    e: {
      alias: 'extension',
      boolean: true
    },
    F: {
      alias: 'force',
      boolean: true
    },
    g: {
      alias: 'glob',
      boolean: true
    },
    l: {
      alias: ['link'],
      boolean: true
    },
    s: {
      alias: ['q', 'quiet', 'silent'],
      boolean: true
    }
  })
  .argv;

/**
 * Collection of handlebar helpers.
 */
class HandlebarHelpers {
  /**
   * Constructor.
   *
   * @param {hb} [engine] Instance of Handlebars
   */
  constructor (engine) {
    if (engine) {
      this.handlebars = engine;
    } else {
      this.handlebars = hb.create();
    }

    this.context = {};
    this.options = {};
    this.variableRegex = /{{{?[#/]?(.*?)}?}}/g;
    this.helpers = {};
    this.generators = [];
  }

  /**
   * Initializes default helpers.
   */
  init () {
    return this
      .helper('lower')
      .helper('upper')
      .helper('capitalize')
      .helper('ascii')
      .helper('under')
      .helper('pad')
      .helper('split')
      .helper('slice')
      .helper('word')
      .helper('char')
      .helper(['index', 'i'])
      .helper(['number', 'n'])
      .helper('image')
      .helper('video')
      .helper('date')
      .helper('head')
      .helper(['dir', 'd'])
      .helper('episode')
      .helper('season')
      .generator('up1')
      .generator('up2')
      .generator('up3')
      .generator('up4')
      .generator('up5')
      .generator('id3')
      .generator(['width', 'w'])
      .generator(['height', 'h'])
      .generator('mime')
      .generator('type')
      .generator('content')
      .generator('json')
      .generator('md5')
      .generator('sha256')
      .generator('version');
  }

  /**
   */
  compile (template, options) {
    let matches, callees = [];

    const parse = this.handlebars.compile(template, options);

    while ((matches = this.variableRegex.exec(template)) !== null) {
      matches[1].split(/\s/).forEach((variable) => {
        if ((variable = /^(\w+)(?:\.[\w\d]+|)$/.exec(variable)) !== null) {
          if (callees.indexOf(variable[1]) === -1) {
            callees.push(variable[1]);
          }
        }
      });
    }

    return (data) => {
      let variables = Object.assign({}, data);

      callees.forEach((name) => {
        const generator = this.generators
          .filter(g => g.name === name || g.aliases.indexOf(name) !== -1)
          .pop();

        if (generator) {
          const result = generator.fn.call(this, variables);

          generator.aliases.forEach((variable) => {
            variables[variable] = result;
          });

          variables[name] = result;
        }
      });

      return parse(variables);
    };
  }

  /**
   * Lowercase.
   *
   * @param {string} r
   *
   * @return {string}
   */
  lower (r) {
    if (typeof r === 'string') {
      return r.toLowerCase();
    }
  }

  /**
   * Uppercase.
   *
   * @param {string} r
   *
   * @return {string}
   */
  upper (r) {
    if (typeof r === 'string') {
      return r.toUpperCase();
    }
  }

  /**
   * Capitalize the first letter.
   *
   * @param {string} r
   *
   * @return {string}
   */
  capitalize (r) {
    if (typeof r === 'string') {
      return r.toUpperCase() + r.slice(1);
    }
  }

  /**
   * ASCII.
   *
   * @param {string} r
   *
   * @return {string}
   */
  ascii (r) {
    if (typeof r === 'string') {
      return r.replace(/[^a-z0-9\s-_.,]/gmi, '');
    }
  }

  /**
   * Replaces non-ASCII characters with underscores.
   *
   * @param {string} r
   *
   * @return {string}
   */
  under (r) {
    if (typeof r === 'string') {
      return r.replace(/[^a-z0-9-_.,]/gmi, '_');
    }
  }

  /**
   * Extracts episode number.
   *
   * @param {string} r
   *
   * @return {number}
   */
  episode (r) {
    if (typeof r === 'string') {
      let matches = r.match(/(?:e|episode.*?)([0-9]+(?:[.-][0-9]+)*)/i);

      if (matches) {
        return Number(matches[1]);
      }
    }
  }

  /**
   * Extracts season number.
   *
   * @param {string} r
   *
   * @return {number}
   */
  season (r) {
    if (typeof r === 'string') {
      let matches = r.match(/(?:s|season.*?)([0-9]+(?:[.-][0-9]+)*)/i);

      if (matches) {
        return Number(matches[1]);
      }
    }
  }

  /**
   * Pad a string to a certain length.
   *
   * @param {string|number} input The input to pad
   * @param {number} length The target length
   * @param {string} pad A character to use as the padding
   *
   * @return {string}
   */
  pad (input, length, pad) {
    if (typeof input === 'string' || typeof input === 'number') {
      input = String(input);
    } else {
      input = '';
    }

    if (!length || !Number.isInteger(length)) {
      return input;
    }

    if (typeof pad === 'string' || typeof pad === 'number') {
      pad = String(pad)[0];
    } else {
      pad = '0';
    }

    if (length < 0) {
      return input.padEnd(length * -1, pad);
    }

    return input.padStart(length, pad);
  }

  /**
   * Extract a slice.
   *
   * @param {object} input
   * @param {number} begin
   * @param {number} end
   *
   * @return {object}
   */
  slice (input, begin, end) {
    if (typeof input.slice === 'function') {
      return input.slice(begin, end);
    }

    if (typeof input === 'object') {
      return Object.entries(input).slice(begin, end);
    }

    return input;
  }

  /**
   * Zero-padded item index.
   *
   * @param {number} length
   * @param {string} pad
   *
   * @return {string}
   */
  index (length, pad) {
    if (!length) {
      length = String(this.context.total - 1).length;
    }

    return this.pad(this.context.index, length, pad);
  }

  /**
   * Zero-padded item number.
   *
   * @param {number} length
   * @param {string} pad
   *
   * @return {string}
   */
  number (length, pad) {
    if (!length) {
      length = String(this.context.total).length;
    }

    return this.pad(this.context.index + 1, length, pad);
  }

  /**
   * Executes a command and returns standard output.
   *
   * @param {string} command Command
   * @param {array} args Arguments
   *
   * @param {object} options Options
   */
  exec (command, args, options) {
    let data;

    try {
      data = child_process.execFileSync(command, args, Object.assign({}, {
        stdio: ['pipe', 'pipe', 'ignore'],
        timeout: 5000,
        maxBuffer: 20480,
        encoding: 'utf8'
      }, options || {}));
    } catch (e) {
    }

    if (!data) {
      return;
    }

    if (this.isNumeric(data)) {
      return Number(data);
    }

    return data;
  }

  /**
   * Whether the input is number.
   *
   * @return {boolean}
   */
  isNumeric (input) {
    let number = Number(input);

    return !Number.isNaN(number) && String(number) === input;
  }

  /**
   * Extract image data using ImageMagick.
   *
   * @param {string} format Format string
   *
   * @return {string}
   */
  image (format) {
    if (!this.context.path || !format) {
      return;
    }

    if (String(format).indexOf('%') === -1) {
      format = `%${format}`;
    }

    return this.exec('magick', [
      this.context.path, '-ping', '-format', format, 'info:'
    ]);
  }

  /**
   * Query a specific field from a JSON object.
   *
   * ```
   * const helper = new HandlebarHelpers();
   * const data = {items: [{name: {first: "John", last: "Doe"}}]};
   * helper.query(data, ['items', 0, 'name', 'first']);
   * ```
   *
   * @param {object|array} data Object-map or array to query
   *
   * @return {string} The field
   */
  query (data) {
    let tree = Array.from(arguments).slice(1),
      node = data;

    if (tree.length === 1) {
      if (typeof tree[0] === 'string') {
        tree = tree[0].split(/[\[\].]/);
      } else if (Array.isArray(tree[0])) {
        tree = tree[0];
      }
    }

    tree.forEach((key) => {
      if (key === null || typeof key === 'undefined') {
        return;
      }

      node = Object.entries(node)
        .filter((r, i) => r[0] === key || i === key)
        .shift();

      if (!node) {
        return false;
      }

      node = node[1];
    });

    return node;
  }

  /**
   * Extract media data using ffmpeg.
   *
   * Same as running:
   *
   * ```
   * ffprobe -v quiet -print_format json -show_format -show_streams --
   * ```
   *
   * @param {number|string} [field] A field to extract
   *
   * @return {string}
   *
   * @private
   */
  media (field) {
    let data, args;

    data = this.exec('ffprobe', [
      '-v', 'quiet',
      '-print_format', 'json',
      '-show_format',
      '-show_streams',
      '--', this.context.path
    ]);

    if (data) {
      try {
        data = JSON.parse(data);
      } catch (e) {
        return '';
      }
    }

    if (!data || !Object.values(data).length) {
      return '';
    }

    if (!field) {
      return data;
    }

    args = Array.from(arguments);
    args.unshift(data);

    return this.query.apply(this, args);
  }

  /**
   * Gets info about a video.
   *
   * Extracts the specified field from a stream at index 0.
   *
   * @param {string} field The field
   *
   * @return {string}
   */
  video (field) {
    return this.media('streams', 0, field);
  }

  /**
   * Gets a ID3 tag.
   *
   * @param {string} tag The tag
   *
   * @return {string}
   */
  id3 (tag) {
    return this.media('format', 'tags', tag);
  }

  /**
   * Gets mime type.
   *
   * @return {string|boolean}
   */
  mime () {
    return mime.lookup(this.context.ext);
  }

  /**
   * Gets media-type from the mime.
   *
   * @return {string|boolean}
   */
  type () {
    let mime = this.mime();

    if (!mime) {
      return false;
    }

    return mime.split('/')[0];
  }

  /**
   * Parent level 1.
   *
   * @return {string}
   */
  up1 () {
    return this.dir();
  }

  /**
   * Parent level 2.
   *
   * @return {string}
   */
  up2 () {
    return this.dir(1);
  }

  /**
   * Parent level 3.
   *
   * @return {string}
   */
  up3 () {
    return this.dir(2);
  }

  /**
   * Parent level 4.
   *
   * @return {string}
   */
  up4 () {
    return this.dir(3);
  }

  /**
   * Parent level 5.
   *
   * @return {string}
   */
  up5 () {
    return this.dir(4);
  }

  /**
   * Image or video height.
   *
   * @return {string}
   */
  height () {
    let result = this.image('%h');

    if (!result) {
      result = this.video('height');
    }

    return result;
  }

  /**
   * Image or video width.
   *
   * @return {string}
   */
  width () {
    let result = this.image('%w');

    if (!result) {
      result = this.video('width');
    }

    return result;
  }

  /**
   * Splits the given input string.
   *
   * @param {string} input
   * @param {string} needle
   * @param {number} [offset]
   * @param {number} [limit]
   */
  split (input, needle, offset, limit) {
    return String(input).split(needle)
      .slice(Number(offset || 0))
      .slice(0, Number(limit || 1))
      .join('');
  }

  /**
   * Character.
   *
   * @param {string} input
   * @param {number} offset
   * @param {number} limit
   *
   * @return {string}
   */
  char (input, offset, limit) {
    return this.split(input, '', offset, limit);
  }

  /**
   * Splits a word.
   *
   * @param {string} input
   * @param {number} index
   *
   * @return {string}
   */
  word (input, index) {
    return this.split(input, /[\s._-]+/, index);
  }

  /**
   * Directory.
   *
   * @param {number} [start]
   * @param {number} [end]
   *
   * @return {string}
   */
  dir (start, end) {
    const parts = this.context.dir.split(/[\/\\]/);

    if (end) {
      return path.join.apply(this, parts.slice(start || 0, end));
    }

    return parts[ parts.length - 1 - (start || 0) ];
  }

  /**
   */
  path () {
    if (arguments) {
      return path.join.apply(this, arguments);
    }

    return this.context.path;
  }

  /**
   * Date.
   *
   * @param {string} format moment.js format
   * @param {string} date
   *
   * @return {string}
   */
  date (format, date) {
    return moment(date).format(format);
  }

  /**
   * Content.
   *
   * @return {string|null}
   */
  content () {
    try {
      return fs.readFileSync(this.context.path, 'utf8');
    } catch (e) {
      return null;
    }
  }

  /**
   * Extracts a value from a JSON file.
   *
   * ```
   * {{json version}}
   * ```
   *
   * @param {string} needle Property-value to extract
   *
   * @return {string} Value
   */
  json (needle) {
    try {
      let args = Array.from(arguments);
      args.unshift(JSON.parse(this.content()));
      return this.query.apply(this, args);
    } catch (e) {
    }
  }

  /**
   * Asks 'version' command for a version number.
   *
   * @return {string}
   */
  version () {
    return this.exec('version', [], {
      cwd: this.context.dir
    });
  }

  /**
   * Extracts number of lines from the beginning of a file.
   */
  head (offset, limit) {
    return this.split(this.content(), /[\n]/, offset, limit);
  }

  /**
   * Gets checksum.
   *
   * @return {string}
   *
   * @private
   */
  checksum (algorithm) {
    let content = this.content();

    if (content === null) {
      return '';
    }

    return crypto.createHash(algorithm || 'sha256')
      .update(content)
      .digest('hex');
  }

  /**
   * SHA-256 checksum.
   *
   * @return {string}
   */
  sha256 () {
    return this.checksum('sha256');
  }

  /**
   * MD5 checksum.
   *
   * @return {string}
   */
  md5 () {
    return this.checksum('md5');
  }

  /**
   * Registers a new generator.
   *
   * A generator populates the template context object based on the variables
   * used in the template string.
   *
   * @param {string|function[]|string[]} name
   * @param {function} fn Callback function
   *
   * @return {this}
   */
  generator (name, fn) {
    const helper = new HandlebarHelpers();

    if (!Array.isArray(name)) {
      name = [name];
    }

    if (!fn) {
      fn = name[0];
    }

    if (typeof fn === 'string') {
      fn = helper[fn];
    }

    this.generators.push({
      name: name[0],
      aliases: name.slice(1),
      fn (context, options) {
        helper.context = context || {};
        helper.options = options || {};
        return fn.apply(helper, options);
      }
    });

    return this;
  }

  /**
   * Registers a new helper.
   *
   * @param {string|array} name Name of the helper
   * @param {function} fn Callback function
   *
   * @return {this}
   */
  helper (name, fn) {
    let helper = new HandlebarHelpers();

    if (!Array.isArray(name)) {
      name = [name];
    }

    if (!fn) {
      fn = name[0];
    }

    if (typeof fn === 'string') {
      fn = helper[fn];
    }

    name.forEach((n) => {
      this.handlebars.registerHelper(n, function () {
        let options = Array.from(arguments);
        helper.context = this;
        helper.options = options.pop();
        helper.name = n;
        return fn.apply(helper, options);
      });
    });

    return this;
  }

  /**
   * Registers.
   *
   * @param {hb} [hanblebars]
   */
  static register (hanblebars) {
    return new HandlebarHelpers(hanblebars).init();
  }
}

const handlebars = HandlebarHelpers.register();

/**
 * Logger.
 */
class Log {
  /**
   * Success message.
   */
  ok () {
    console.log.apply(console, arguments);
    return this;
  }

  /**
   * Info message.
   */
  info () {
    if (argv.verbose >= 1) this.ok.apply(this, arguments);
    return this;
  }

  /**
   * Debug message.
   */
  debug () {
    if (argv.verbose >= 2) this.ok.apply(this, arguments);
    return this;
  }

  /**
   * Fatal message.
   */
  fatal () {
    this.warn.apply(this, arguments);
    process.exit(1);
    return this;
  }

  /**
   * Error message.
   */
  warn () {
    console.error.apply(console, arguments);
    return this;
  }
}

/**
 * Instance of logger.
 *
 * @constant {Log}
 */

const log = new Log();

/**
 * Usage.
 */
const usage = () => {
  log.ok(`Recursive file renamer.

Usage:
  $ brn [options] <filename, ...> <newname>

Options:
  -h, --help          Print this message
  -v, --version       Print version number
  -A, --absolute      Allow absolute path as a newname
  -D, --dry-run       Dry-run without writing anything
  -F, --force         Allow overwriting existing files
  -q, --quiet         Non-interactive mode, do not prompt for options
  -c, --copy          Copy instead of moving
  -g, --glob          Glob and expand filenames
  -l, --link          Create symbolic link instead of moving
  -V, -VV, --verbose  Verbose mode
  -d, --directories   Match directories
  -f, --files         Match files
      --no-extension  Do not automatically add extension
      --no-color      Disable colors
      --color         Enable colors

Examples:
    $ brn *.jpg '{{index}}{{ext}}' --dry-run
    $ brn */*/*.jpg '{{under up1}}_{{name}}_by_{{under up2}}{{ext}}' --dry-run
`);
};

/**
 * Main.
 */
const main = () => {
  let operation, icon2, files = Array.from(argv._);
  const name = files.pop();

  if (!name || files.length === 0) {
    log.fatal('Source filename and a new name must be provided.');
  }

  const template = handlebars.compile(name, {
    noEscape: true
  });

  if (argv.glob) {
    let expanded = [];

    for (const pattern of files) {
      expanded = expanded.concat(glob.sync(pattern));
    }

    files = expanded;
  }

  files = files.map((file) => {
    return path.normalize(String(file));
  });

  let names = [],
    duplicates = [],
    reDir = /[\/\\]$/;

  if (argv.copy) {
    operation = 'copy';
    icon2 = chalk`{magenta ⋯}`;
  } else if (argv.link) {
    operation = 'link';
    icon2 = chalk`{magenta ↯}`;
  } else {
    operation = 'move';
    icon2 = chalk`{blue ➞}`;
  }

  if (argv.dryrun) {
    log.ok(chalk`Running with {blue --dryrun}, nothing will be written.`);
    log.ok(chalk`{green These operations would be performed:}`);
  }

  files.forEach((file, index) => {
    new Promise((resolve, reject) => {
      fs.stat(file, (err, stat) => {
        let filters = [], icon1, data, newname, duplicate, newinfo;

        if (err) {
          resolve();
          return;
        }

        if (argv.files) {
          filters.push(stat.isFile);
        }

        if (argv.directories) {
          filters.push(stat.isDirectory);
        }

        if (filters.length && !filters.filter((fn) => fn.call(stat)).length) {
          resolve();
          return;
        }

        data = Object.assign({}, path.parse(file), {
          index: index,
          path: file,
          total: files.length,
          stat: stat,
          template: name
        });

        newname = template(data);
        newinfo = path.parse(newname);

        if (newname) {
          // Newname end to a slash, but the source file was not a directory.
          if (newinfo.base && reDir.test(name) && !stat.isDirectory()) {
            newinfo.dir = path.join(newinfo.dir, newinfo.base);
            newinfo.base = data.base;
            newname = path.format(newinfo);
          }

          // If filename is not absolute, newname can not be either.
          let allowAbsolute = argv.absolute || path.isAbsolute(file);

          if (!allowAbsolute && path.isAbsolute(newname)) {
            newinfo.dir = newinfo.dir.substring(newinfo.root.length);
            newinfo.root = null;
            newname = path.format(newinfo);
          }

          newname = path.format(newinfo);
          newinfo = path.parse(newname);

          // Newname starts with a dot, but given name template does not.
          if (name.indexOf('.') !== 0 && newname.indexOf('.') === 0) {
            newname = '';
          }
        }

        if (!newname || newname === '.' || newname.base === data.ext) {
          log.info(chalk`{green ·} %s {green ―} skip empty`, file);
          resolve();
          return;
        }

        // Add root if newname does not contain it.
        if (data.root && !newinfo.root) {
          newinfo.root = data.root;
          newname = path.format(newinfo);
        }

        // Add directory if the newname does not contain it.
        if (data.dir && !newinfo.dir) {
          newinfo.dir = data.dir;
          newname = path.format(newinfo);
        }

        // Add extension if newname removed it.
        if (argv.extension !== false && data.ext && !newinfo.ext) {
          newinfo.ext = data.ext;
          newinfo.base = null;
          newname = path.format(newinfo);
        }

        newname = path.normalize(newname);
        newinfo = path.parse(newname);

        if (file === newname) {
          log.info(chalk`{green ·} %s {green ―} untouched`, file);
          resolve();
          return;
        }

        duplicate = duplicates.filter((r) => r === newname).length;
        duplicates.push(newname);

        if (duplicate) {
          newinfo.base = `${newinfo.name}.${duplicate}${newinfo.ext}`;
          newname = path.format(newinfo);
        }

        names.push(Object.assign(data, {
          newname: newname,
          duplicate: duplicate
        }));

        if (duplicate > 0) {
          icon1 = chalk`{magenta !}`;
        } else {
          icon1 = chalk`{blue ⋯}`;
        }

        log.ok('%s %s %s %s', icon1, file, icon2, newname);

        if (!argv.dryrun) {
          fs.mkdirsSync(newinfo.dir);

          fs[operation](file, newname, {overwrite: argv.force === true}, (e) => {
            if (e) {
              log.warn(e.message);
            }

            resolve();
          });

          return;
        }

        resolve();
      });
    });
  });
};

if (argv.help || process.argv.length === 2) {
  usage();
  return;
}

if (argv.version) {
  log.ok('0.0.0');
  return;
}

main();
