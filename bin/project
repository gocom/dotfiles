#!/usr/bin/env node

const fs = require('fs');
const util = require('util');
const glob = require('glob');
const chalk = require('chalk');
const handlebars = require('handlebars');
const path = require('path');
const read = require('read');
const {execFile} = require('child_process');
const argv = require('yargs')
  .help(false)
  .version(false)
  .options({
    h: {
      alias: 'help',
      boolean: true
    },
    v: {
      alias: 'version'
    },
    V: {
      alias: 'verbose',
      count: true
    },
    t: {
      alias: 'template',
      string: true
    },
    D: {
      alias: ['dry-run', 'dryrun'],
      boolean: true
    },
    F: {
      alias: 'force',
      boolean: true
    },
    s: {
      alias: ['q', 'quiet', 'silent'],
      boolean: true
    },
    L: {
      alias: ['licenses'],
      boolean: true
    },
    l: {
      alias: ['templates', 'list'],
      boolean: true
    }
  })
  .argv;

const prefix = (() => {
  let home = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];
  return path.join(home, '.project');
})();

const templates = glob.sync(`${prefix}/template/*/`)
  .map((f) => path.basename(f));

const licenses = glob.sync(`${prefix}/license/*.license`)
  .map((f) => path.parse(f).name);

class Log {
  ok () {
    console.log.apply(console, arguments);
    return this;
  }

  info () {
    if (argv.verbose >= 1) this.ok.apply(this, arguments);
    return this;
  }

  debug () {
    if (argv.verbose >= 2) this.ok.apply(this, arguments);
    return this;
  }

  fatal () {
    this.warn.apply(this, arguments);
    process.exit(1);
    return this;
  }

  warn () {
    console.error.apply(console, arguments);
    return this;
  }
}

const log = new Log();

const readFile = (file, options) => {
  try {
    return fs.readFileSync(file, options || 'utf8');
  } catch (e) {
    log.debug(e.message);
  }
};

const json = (file) => {
  const content = readFile(file);

  if (content) {
    try {
      return JSON.parse(content);
    } catch (e) {
      log.info(e);
    }
  } else {
    return {};
  }
};

const prompt = (options) => {
  if (typeof options === 'object') {
    options = Object.assign({}, options);
  } else {
    options = Object.assign({}, {
      prompt: options
    });
  }

  if (typeof options.prompt === 'string') {
    options.prompt = options.prompt[0].toUpperCase() + options.prompt.slice(1);
    options.prompt = `${options.prompt}: `;
  }

  return new Promise((resolve, reject) => {
    read(options, (err, result) => {
      if (err) {
        reject(err);
      }

      resolve(result);
    });
  });
};

const exec = (command, args, options) => {
  return new Promise((resolve, reject) => {
    execFile(command, args, options || {}, (err, result) => {
      if (err) {
        reject(err);
      }

      resolve(String(result).trim());
    });
  });
};

const writeFile = (file, data) => {
  let flag = 'w';

  if (!argv.force) {
    flag = 'wx';

    try {
      fs.accessSync(file);
      log.ok(chalk`{green ✓} %s`, file);
      return true;
    } catch (e) {
      log.debug(e);
    }
  }

  if (!argv.dryrun) {
    try {
      fs.writeFileSync(file, data, {
        encoding: 'utf8',
        flag: flag
      });
    } catch (e) {
      log.warn(chalk`{red ✘} %s`, file);
      log.debug(e.message);
      return false;
    }
  }

  log.ok(chalk`{blue ↯} %s`, file);
  return true;
};

const mkdir = (directory) => {
  if (!argv.force) {
    try {
      fs.accessSync(directory);
      log.ok(chalk`{green ✓} %s/`, directory);
      return true;
    } catch (e) {
      log.debug(e);
    }
  }

  if (!argv.dryrun) {
    try {
      fs.mkdirSync(directory, {
        recursive: true
      });
    } catch (e) {
      log.warn(chalk`{red ✘} %s/`, directory);
      log.debug(e.message);
      return false;
    }
  }

  log.ok(chalk`{blue ↯} %s/`, directory);
  return true;
};

const main = async () => {
  let status = 0;

  log.debug('Template: %j', templates);

  if (argv.dryrun) {
    log.ok(chalk`Running with {cyan --dryrun}, nothing will be written.`);
  }

  const template = argv.template || await prompt({
    prompt: 'template',
    default: templates[0]
  });

  if (!template || templates.indexOf(template) === -1) {
    log.fatal(`Template '%s' does not exist.`, template);
  }

  let config = {
    name: template,
    directory: path.join(prefix, 'template', template),
    author: {},
    silent: argv.silent
  };

  config.config = path.join(config.directory, 'config.json');
  config.root = path.join(config.directory, 'root');
  config['author-name'] = await exec('git', ['config', '--get', 'user.name']);
  config['author-email'] = await exec('git', ['config', '--get', 'user.email']);

  config = Object.assign(config, json(config.config));

  while ('require' in config && config.require) {
    for (const r of Array.from(config.require)) {
      config = Object.assign(
        config,
        {require: false},
        json(path.join(config.directory, r))
      );
    }
  }

  if ('variables' in config) {
    for (const r of config.variables) {
      let options = {
        prompt: r.name,
        default: config[r.name]
      };

      if (argv[r.name]) {
        config[r.name] = argv[r.name];
        config.silent = true;
        continue;
      }

      if (!r.prompt || config.silent) {
        continue;
      }

      if (typeof r.prompt === 'object') {
        options = Object.assign(options, r.prompt);
      }

      config[r.name] = await prompt(options);
    }
  }

  for (const r of Object.entries(config)) {
    const name = r[0].split(/[.-]/);

    if (name.length === 2) {
      if (typeof config[name[0]] !== 'object') {
        config[name[0]] = {};
      }

      config[name[0]][name[1]] = r[1];
    }
  }

  log.debug('Template data: %j', config);

  const resolve = (file) => {
    const r = {
      source: file,
      target: path.relative(config.root, file)
    };

    log.info('source: %s', r.source);
    log.info('target: %s', r.target);

    return r;
  };

  const directories = glob.sync(`${config.root}/**/*/`, {
    dot: true
  }).map(resolve);

  for (const f of directories) {
    if (!mkdir(f.target)) {
      status = 1;
    }
  }

  let files = glob.sync(`${config.root}/**/*`, {
    nodir: true,
    dot: true
  }).map(resolve);

  if (config.license && licenses.indexOf(config.license) !== -1) {
    files.push({
      source: `${prefix}/license/${config.license}.license`,
      target: 'LICENSE'
    });

    config.header = readFile(
      `${prefix}/license/header/${config.license}.license`
    );
  }

  for (const f of files) {
    if (!writeFile(f.target, handlebars.compile(readFile(f.source))(config))) {
      status = 1;
    }
  }

  process.exit(status);
};

if (argv.version === true) {
  log.ok('0.0.0');
  return;
}

if (argv.templates) {
  log.ok(`%s`, templates.join("\n"));
  return;
}

if (argv.licenses) {
  log.ok(`%s`, licenses.join("\n"));
  return;
}

if (argv.help) {
  log.ok(`Initialize a project directory from templates.

Run in an empty directory you wish to create your project and answer the
prompted questions.

Usage:
  $ project [options]

Options:
  -h, --help          Print this message
  -v, --version       Print version number
  -F, --force         Allow overwriting existing files
  -q, --quiet         Non-interactive mode, do not prompt for options
  -D, --dry-run       Dry-run without writing anything
  -V, -VV, --verbose  Verbose mode
  -l, --templates     List available project template identifiers
  -L, --licenses      List available licenses
      --no-color      Disable colors
      --color         Enable colors

  Using any of the following project variable options will run the program in
  the non-interactive --quiet mode.

  --author[=]<name>
  Name of the author. Accessible through {{author}} variable.

  --author_homepage[=]<url>
  Author's homepage. Accessible through {{author_homepage}} variable.

  --description[=]<string>
  Project description. Accessible through {{author_homepage}} variable.

  --homepage[=]<url>
  Project homepage. Accessible through {{homepage}} variable.

  --license[=]<identifier>
  Author's homepage. Accessible through {{license}} variable.

  --name[=]<name>
  Name of the project. Accessible through {{name}} variable.

  --template[=]<identifier>
  Template. Accessible through {{template}} variable.

  --vendor[=]<identifier>
  Vendor. Accessible through {{vendor}} variable.

  --version[=]<0.0.0>
  Version. Accessible through {{version}} variable.

  --year[=]<yyyy>
  Year. Accessible through {{year}} variable.

Configuration:
  Project templates are stored in \$PROJECT_TEMPLATE:
    $prefix

  The directory tree should have the structure of:

    $prefix/license/{{license}}.license
    $prefix/template/{{template}}/root/*

  Each template can take advantage of external callback executables:

    $prefix/template/{{template}}/pre
    $prefix/template/{{template}}/post

  Project template files can use variables, including:

    {{author}}
    {{author_homepage}}
    {{description}}
    {{header}}
    {{homepage}}
    {{license}}
    {{name}}
    {{template}}
    {{vendor}}
    {{version}}
    {{year}}
    {{yyyy}} {{mm}} {{dd}} {{HH}} {{MM}} {{SS}} {{TZ}}

Example:
  $ mkdir "test" && cd "test"
  $ project
`);
  return;
}

main()
  .catch((err) => {
    log.info(err);
  });
