#!/usr/bin/env bash

app_name="${0##*/}"
app_version="0.0.0"

usage () {
  cat <<EOF
List and edit macOS Finder file tags.

Uses xattr, plutil, xxd and jq to modify the plist definition embedded
in the 'com.apple.metadata:_kMDItemUserTags' extended file attribute.

Usage:
  $ $app_name [options] [add|list|remove|reverse|sort] [[tag ...] <filename>]

Options:
  -h, --help     Print this message
  -v, --version  Print version number

Commands:
  $ $app_name add <tag ...> <filename>
  Add tags to a file.

  $ $app_name list <filename ...>
  List file's tags.

  $ $app_name remove <tag ...> <filename>
  Remove tags from a file.

  $ $app_name reverse <filename>
  Reverse the order of tags.

  $ $app_name sort <filename>
  Sort file's tags to alphabetical order.

Example:
  $ $app_name add nature woods forest picture.jpg
  $ $app_name list picture.jpg
  > forest
    nature
    woods
  $ $app_name remove nature picture.jpg
  $ $app_name list picture.jpg
  > forest
    woods
EOF
}

main () {
  local option list args OPTIND OPTARG OPTERR

  args=()

  for option in "$@"; do
    case "$option" in
      -*) break ;;
      *) args+=("$option"); shift ;;
    esac
  done

  while getopts ":hvailoqs-:" option; do
    case "$option" in
      -)
        case "$OPTARG" in
          help) usage; exit 0 ;;
          version) echo "$app_version"; exit 0 ;;
          *)
            if [ "$OPTERR" = 1 ] ; then
              echo "Unknown option --$OPTARG"
              exit 1
            fi
            ;;
        esac;;
      h) usage; exit 0 ;;
      v) echo "$app_version"; exit 0 ;;
      \?)
        echo "Invalid option: -$OPTARG"
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument."
        exit 1
        ;;
      *)
        echo "Unexpected: -$OPTARG"
        exit 1
        ;;
    esac
  done

  shift "$((OPTIND - 1))"
  set -- "${args[@]}" "$@"

  if [ "$#" -eq 0 ]; then
    usage
    exit 0
  fi

  case "$1" in
    add) add "${@:2}" ;;
    list) list "${@:2}" ;;
    rm|remove) remove "${@:2}" ;;
    reverse) update 'reverse' "${@:2}" ;;
    sort) update 'sort' "${@:2}" ;;
    *) list "$@" ;;
  esac
}

json_read () {
  local plist file

  file="${1:-}"

  if ! [ "$file" ] || ! [ -r "$file" ]; then
    echo "'$file' is not readable." >&2
    return 1
  fi

  plist="$(xattr -p com.apple.metadata:_kMDItemUserTags "$file" 2> /dev/null)"

  if [ "$plist" ]; then
    plist="$(echo "$plist" | xxd -r -p | plutil -convert json - -o -)"
  else
    plist="[]"
  fi

  if [ "$list" = "plain" ]; then
    if ! [ "$plist" = "[]" ]; then
      echo "$plist" | jq -r 'join("\n")'
    fi

    return 0
  fi

  echo "$plist"
}

json_write () {
  local tags

  if ! [ "${1:-}" ] || ! [ -w "$1" ]; then
    echo "'${1:-}' is not writable." >&2
    return 1
  fi

  tags="$(cat)"

  if ! [ "$tags" ] || [ "$tags" = "[]" ]; then
    xattr -xd com.apple.metadata:_kMDItemUserTags "$1" || return 1
    return 0
  fi

  tags="$(echo "$tags" | plutil -convert binary1 - -o - | xxd -p -c 256 -u)"
  xattr -xw com.apple.metadata:_kMDItemUserTags "$tags" "$1" || return 1
}

add () {
  local tag tags

  tags="$(json_read "${@:$#:1}")" || exit 1

  for tag in "${@:1:$(($#-1))}"; do
    tags="$(echo "$tags" | jq --arg a "$tag" '. += [$a] | unique | sort')"
  done

  echo "$tags" | json_write "${@:$#:1}"
}

list () {
  local option list

  list="plain"

  for option in "$@"; do
    json_read "$option"
  done | sort -u
}

remove () {
  local tag tags

  if [ "$#" -eq 1 ] || [ "${1:-}" = "*" ]; then
    echo '[]' | json_write "${@:$#:1}"
    return 0
  fi

  tags="$(json_read "${@:$#:1}")" || exit 1

  for tag in "${@:1:$(($#-1))}"; do
    tags="$(echo "$tags" | jq --arg r "$tag" '. -= [$r] | sort')"
  done

  echo "$tags" | json_write "${@:$#:1}"
}

update () {
  local option

  for option in "${@:2}"; do
    json_read "$option" | jq "$1" | json_write "$option"
  done
}

main "$@"
