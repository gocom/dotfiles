#!/usr/bin/env bash

app_name="${0##*/}"
app_version="0.0.0"

usage () {
  cat <<EOF
Interactively cherry-picks commits by searching their messages for a keyword.

This tool is intended for tasks where set of commits need to be taken
to a target branch in their original commit date order. This could, for
instance, be used to build release branches from a main branch.

Usage:
  $ $app_name [options] <source-branch> <keyword ...>

Options:
  -h, --help     Print this message
  -v, --version  Print version number

Examples:
  $ git checkout release/2022-01
  $ $app_name main EXAMPLE-101

EOF
}

msg () {
  local message

  for message in "$@"; do
    echo "$message"
  done
}

err () {
  msg "$@" >&2
}

fatal () {
  err "$@"
  exit 1
}

main () {
  case "${1:-}" in
    -v|--version) echo "$app_version" ;;
    -h|--help) usage ;;
    *) pick "$@" ;;
  esac
}

pick() {
  local branch selected selection hash

  if [ "$#" -eq 0 ]; then
    fatal "Branch is required."
  fi

  branch="${1:-}"

  shift 1

  # shellcheck disable=SC2046
  set -- $(hashes "$@")

  if [ "$#" -eq 0 ]; then
    fatal "No commits found matching the given criteria."
  fi

  commits "$@"

  read -r -p "Cherry-pick commit row (1-n, all, exit): " selected

  case "$selected" in
    e*|E*|"") exit 0 ;;
    *) selection "$selected" "$@" || fatal ;;
  esac

  for hash in "${selection[@]}"; do
    msg "Cherry-picking $hash..."
    git cherry-pick -x "$hash" || skip
  done
}

commits() {
  local hash index padding

  index=1
  padding="    "

  for hash in "$@"; do
    git show \
      --reverse \
      --quiet \
      --color=always \
      --date=format:'%Y-%m-%d %H:%M:%S' \
      --pretty="${padding:${#index}}%C(auto,green)$index%Creset  %<(74,trunc)%s%n${padding:-}  %C(auto,yellow)%h%Creset  %C(auto,magenta)%ad%Creset  %<(40,trunc)%an" \
      "$hash"

    ((index++))
  done
}

selection () {
  local min max row i hash

  selection=()

  row="$1"

  shift 1

  case "$row" in
    a*|"") ;;
    *-*)
      min="$(echo "$row" | awk -F '-' '{print $1}')"
      max="$(echo "$row" | awk -F '-' '{print $2}')"
      ;;
    [0-9]*)
      min="$row"
      max="$row"
      ;;
    *) return 1 ;;
  esac

  min="${min:-1}"
  max="${max:-$#}"

  for ((i=min;i<=max;i++)); do
    hash="${*:$i:1}"

    if ! [ "$hash" ]; then
      return 1
    fi

    selection+=("$hash")
  done

  return 0
}

skip () {
  local answer

  err "Failed to cherry-pick $hash"
  commit "$hash" >&2
  read -r -p "Skip and continue from the next commit (Yes/no)? " answer

  case "$answer" in
    Y|y)
      git cherry-pick --abort 2> /dev/null \
        || fatal "Aborting cherry-pick failed."
        ;;
    *) fatal ;;
  esac
}

hashes () {
  local args option

  args=()

  for option in "$@"; do
    args+=("--grep=$option")
  done

  git --no-pager log --pretty=tformat:"%H" "${args[@]}" "$branch"
}

main "$@"
